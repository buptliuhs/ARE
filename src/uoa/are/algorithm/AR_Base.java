// Copyright 2015 Tony (Huansheng) Liu
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package uoa.are.algorithm;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import uoa.are.common.ActivityType;
import uoa.are.dm.RecElement;
import uoa.are.util.FileUtil;
import uoa.are.util.RandomStringGenerator;

public abstract class AR_Base extends ARProcessor {
    private static final String _script = "/opt/uoa/scripts/ar.sci";
    private String _tmp_script;

    /**
     * Constructor to specify scilab script.
     * 
     * @param conf
     */
    public AR_Base(Map<String, Object> conf) {
        super(conf);
    }

    /**
     * Calling this function will generate a new temporary scilab script file
     * that can be run in a new process. The generated file is generated by
     * replacing the SRC_FILE and DST_FILE in _script.
     * 
     * @throws IOException
     */
    private void generateScriptFile() throws IOException {
        if (!StringUtils.isEmpty(_tmp_script)) {
            logger.info("Remove the old script & create a new one");
            FileUtil.deleteFile(_tmp_script);
            _tmp_script = "";
        }
        _tmp_script = _script + "." + RandomStringGenerator.generate();

        PrintWriter pw = new PrintWriter(_tmp_script);
        BufferedReader br = new BufferedReader(new FileReader(new File(_script)));

        String line = null;
        while ((line = br.readLine()) != null) {
            line = line.replace(SRC_FILE, (String) _conf.get(SRC_FILE)).replace(DST_FILE, (String) _conf.get(DST_FILE));
            pw.println(line);
        }
        br.close();
        pw.close();
    }

    /**
     * Clean temporary file.
     */
    protected void cleanUp() {
        if (!StringUtils.isEmpty(_tmp_script)) {
            FileUtil.deleteFile(_tmp_script);
            _tmp_script = "";
        }
    }

    /**
     * Load double array from file.
     * 
     * @param file
     * @return
     * @throws IOException
     */
    private Double[] loadDoubleArray(String file) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader(new File(file)));
        String line = null;

        List<Double> ret = new LinkedList<Double>();
        while ((line = br.readLine()) != null) {
            ret.add(Double.parseDouble(line));
        }
        br.close();

        Double[] r = new Double[ret.size()];
        return ret.toArray(r);
    }

    /**
     * Generate analysis result based on three vectors: 1) SMA_value; 2)
     * seg_val_ang; 3) seg_val_ang_vel.
     * 
     * @param SMA_value
     * @param seg_val_ang
     * @param seg_val_ang_vel
     * @return
     */
    protected abstract RecElement[] analyseActivity(Double[] SMA_value, Double[] seg_val_ang, Double[] seg_val_ang_vel);

    private Process launchScilabProcess() throws IOException {
        generateScriptFile();
        logger.info("Running script: " + _tmp_script);
        String SCILAB_EXECUTABLE = System.getenv("SCILAB_EXECUTABLE");
        logger.info("SCILAB_EXECUTABLE: " + SCILAB_EXECUTABLE);

        ProcessBuilder pb = new ProcessBuilder(SCILAB_EXECUTABLE, "-f", _tmp_script);
        pb.inheritIO();

        return pb.start();
    }

    /**
     * Do Activity Recognition.
     * 
     * @see uoa.are.algorithm.ARProcessor#doAR()
     */
    protected boolean doAR() {
        try {
            Process scilabProcess = launchScilabProcess();
            if (scilabProcess.waitFor() != 0) {
                logger.error("Process failed! Exit value: " + scilabProcess.exitValue());
                return false;
            }
            // 3 files generated
            // DST_FILE.sma
            // DST_FILE.seg_val_ang
            // DST_FILE.seg_val_ang_vel
            Double[] ima = loadDoubleArray(_conf.get(DST_FILE) + ".sma");
            logger.info("ima.length = " + ima.length);
            Double[] seg_val_ang = loadDoubleArray(_conf.get(DST_FILE) + ".seg_val_ang");
            logger.info("seg_val_ang.length = " + seg_val_ang.length);
            Double[] seg_val_ang_vel = loadDoubleArray(_conf.get(DST_FILE) + ".seg_val_ang_vel");
            logger.info("seg_val_ang_vel.length = " + seg_val_ang_vel.length);

            // analysis
            activities = analyseActivity(ima, seg_val_ang, seg_val_ang_vel);
            logger.info("activities.length = " + activities.length);

            // Delete intermediate files
            FileUtil.deleteFile(_conf.get(DST_FILE) + ".sma");
            FileUtil.deleteFile(_conf.get(DST_FILE) + ".seg_val_ang");
            FileUtil.deleteFile(_conf.get(DST_FILE) + ".seg_val_ang_vel");

            return true;
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
        }
        return false;
    };

    protected void markResult(RecElement[] result, int start, int end, int a) {
        logger.debug("markResult [" + start + ", " + end + "] --> " + ActivityType.stringValue(a));
        for (int i = start; i <= end; ++i)
            result[i].num_filt = a;
    }

}
